9-1. Accessing Form Text Input Values
    Problem: You need to access the contents of a text input form element using JavaScript.
    Solution: Use the DOM to access the form element:

            var formValue = document.forms["formName"].elements["elementName"].value;

9-2. Dynamically Disabling and Enabling Form Elements
    Problem: Based on some action or event, you want to disable, or enable, one or more form elements.
    Solution: Use the disabled property to enable or disable form element(s), accessing the element via the forms/elements
        collections:

            document.forms["formName"].elements["elementName"].disabled = true;

        or via direct access to an element via an identifier:

            document.getElementById("elementName").disabled = true;

9-3. Getting Information from a Form Element Based on an Event
    Problem: You need to access information from a form element after an event.
    Solution: Depending on the form element, you can capture any number of events, and based on the event, process the
        form element data.

9-4. Performing an Action when a Radio Button is Clicked
    Problem: You want to perform an action based on which radio button is clicked.
    Solution: Attach an onclick event handler to each of the radio buttons; in the event handler perform whatever action
        you need:

            window.onload = function() {
                var radios = document.forms[0].elements["group1"];
                for (var i = 0; i < radios.length; i++)
                    radios[i].onclick = radioClicked;
            }
            function radioClicked() {
                if (this.value = "one")
                    document.forms[0].elements["line_text"].disabled = true;
            }

    Source Code: example9_1.html

9-5. Checking for a Valid Phone Number
    Problem: You want to validate form information that requires certain format, such as a valid phone number.
    Solution: Access the form field value than use a regular expression to validate the format. To validate a US-based
        phone number (area + prefix + digits):

            // filter out anything but numbers to standardize input
            var phone = documento.forms[0].elements["intext"].value;
            var re = /\D+/g;
            var cleanphone = phone.replace(re, "");

            // check length
            if (cleanphone.length < 10) alert ("bad phone");

9-6. Canceling a Form Submission
    Problem: You want to cancel a form submission if you find the data entered into the form fields invalid.
    Solution: If the form fields don't validate, cancel the form submission using the technique appropriate to the event
        handling technique you're using. Here, we're borrowing form Chapter 7 (where we covered events):

            // listen to events
            function listenEvent(eventTarget, eventType, eventHandler) {
                if (eventTarget.addEventListener) {
                    eventTarget.addEventListener(eventType, eventHandler, false);
                } else if (eventTarget.attachEvent) {
                    eventTarget.attachEvent("on" + eventType, eventHandler);
                } else {
                    eventTarget["on" + eventType] = eventHandler;
                }
            }

            // cancel event
            function cancelEvent(event) {
                if (event.preventDefault) {
                    event.preventDefault();
                } else {
                    event.returnValue = false;
                }
            }

            window.onload = function() {
                var form = document.forms["picker"];
                listenEvent(form, "submit", validateFields);
            }

            function validateFields(evt) {
                evt = evt ? window.event;
                ...
                if (invalid) {
                    cancelEvent(evt);
                }
            }

9-7. Preventing Duplicate Form Submissions
    Problem: Potential harm could occur if a user submits the same form multiple times. You want to prevent multiple
        form submissions.
    Solution: One approach is to provide a message that the form has been submitted, and then providing some means to
        prevent the web page reader from submitting the form again In its simples variation, the following would work:

            function validateSubmission(evt) {
                ...
                alert("Thank you, we're processing your order right now.");
                document.getElementById("submitButton").disabled = true;
            }

    Source Code: example9_2.html

9-8. Hiding and Displaying Form Elements
    Problem: You want to hide form elements until some event.
    Solution: Surround the form elements that will be hidden with a div element:

            <form id="picker" method="post" action="">
                Item 1: <input type="radio" name="group1" value="one" />
                Item 2: <input type="radio" name="group1" value="two" />
                Item 3: <input type="radio" name="group1" value="three" /><br /><br />
                <div id="hidden_elements">
                    Input 1: <input type="text" id="intext" />
                    Input 2: <input type="text" id="intext2" />
                    Input 3: <input type="text" id="intext3" /><br /><br />
                </div>
                <input type="submit" id="submitbutton" value="Send form" />
            </form>

        Change the div's display to none when the page loads:

            window.onload = function() {
                document.getElementById("hidden_elements").style.display = "none";

                // attach the click event handler to the radio buttons
                var radios = document.forms[0].elements["group1"];
                for (var i = 0; i < radios.length; i++)
                    radios[i].onclick = radioClicked;
            }

        When the event to display the form element occurs, change the div element's display so that the form elements
        are displayed:

            function radioClicked() {
                if (this.value == "two") {
                    document.getElementById("hidden_elements").style.display = "block";
                } else {
                    document.getElementById("hidden_elements").style.display = "none";
                }
            }

9-9. Modifying a Selection List Based on Other Form Decisions
    Problem: You want to modify the contents of a second selection list based on the choice made in a first selection
        list.
    Solution: You have two options when it comes to modifying the contents of one selection list, based on the choice
        in another selection list.

        The first is to query a database and build the selection list based on the choice. This is demonstrated in the
        Recipe 18.9, which cover Ajax.

        The second approach is to maintain a static copy of the selection list options:

        var citystore = new Array();
        citystore[0] = ['CA', 'San Francisco'];
        citystore[1] = ['CA', 'Los Angeles'];
        citystore[2] = ['CA', 'San Diego'];
        citystore[3] = ['MO', 'St. Louis'];
        citystore[4] = ['MO', 'Kansas City'];
        citystore[5] = ['WA', 'Seattle'];
        citystore[6] = ['WA', 'Spokane'];
        citystore[7] = ['WA', 'Redmond'];

        // And use this copy to rebuild the selection list
        function filterCities() {
            var state = this.value;
            var city = document.getElementById("cities");
            city.option.length = 0;

            for (var i = 0; i < citystore.length; i++) {
                var st = citystore[i][0];
                    if (st == state) {
                    var opt = new Option(citystore[i][1]);
                    try {
                        city.add(opt, null);
                    } catch(e) {
                        city.add(opt);
                    }
                }
            }
        }

    Source Code: example9_3.html
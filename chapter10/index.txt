10-1. Gracefully Handling no JavaScript Support
    Problem: You want to ensure your pages work as well with JavaScript turned off as when it's turned on.
    Solution: One approach is to use the noscript element to provide alernative functionality:

            <script type="text/javascript">
                document.writeln("<p>Some content</p>");
            </script>
            <noscript><p>Fall back account</p></noscript>

        Several years ago, it wasn't uncommon to find script blocks scattered about a page, generating web page content
        on the fly. To ensure that something showed up even if scripting was turned off, the developers would match the
        script with a noscript element. This noscript element would provide fallback page content or information. Now,
        web developers create the entire page and all of tis content without any scripting enabled. Then, and only then,
        they'll add script to made the page more helpful, interactive, or even fun.

        Example 10-1 shows a very simple implementation of this type of functionality. If scripting is turned off, all
        of the form elements display by default. If scripting is turned on, however, the text input elements in the
        lower part of the form are hidden when the page is loaded, and only displayed when the second radio is clicked.

    Source Code: example10_1.html

10-2. Checking for Errors in Functions
    Problem: You want to signal to the calling applications that an error happened in a function.
    Solution: The simplest approach to signaling an error in a function is through the returned result:

            function sumNumbers(numArray) {
                var result = 0;
                // sum numbers in array
                // unless array is empty, or nonnumber reached
                if (numArray.length > 0) {
                    for (var i = 0; i < numArray.length; i++) {
                        if (typeof numArray[i] == "number") {
                            result += numArray[i];
                        } else {
                            result = NaN;
                            break;
                        }
                    }
                } else {
                    result = NaN;
                }
                return result;
            }
            ...
            var ary = new Array(1, 15, "three", 5, 5);
            var res = sumNumbers(ary); // res is NaN
            if (isNaN(res)) alert("Encountered a bad array or array element");

10-3. Using an Alert for Simple Debugging
    Problem: You want a simple way to check the value of a variable.
    Solution: Use an alert message bos to output the value of a variable.

10-4. Catching an Error and Providing Graceful Error Handling
    Problem: You want to incorporate helpful error handling into your JavaScript.
    Solution: Use the try...catch exception handling technique.

10-5. Initiating Manageable Errors
    Problem: You want to incorporate custom exceptions into your applications or libraries that provide useful
        information to calling applications.
    Solution: Use the throw statement, and create a custom object as an exception:

            if (typeof value == "number") {
                sum += number;
            } else {
                throw "NotANumber";
            }

        In the solution, the exception is thrown as a string, You can also throw an integer, Boolean, or object. If you
        only need to provide an exception message, use the string - or an integer if you're using an array of exceptions,
        and the integer is used to look up the error. Otherwise, either create an throw a specific exception, or create
        a new Error object, providing your own error message:

            if (typeof value == "number") {
                sum += number;
            } else {
                throw new Error("NotANumber");
            }

10-6. Using Firebug with Firefox
10-7. Setting a Breakpoint and Examining Data with Firebug
10-8. Firefox and the Console
10-9. Using IE's Built-in Debugger
10-10. Setting a Breakpoint with IE Developer Tools
10-11. Opera's Dragonfly
10-12. Setting a Breakpoint with Dragonfly
10-13. Turning on Safari's Development Tools
10-14. Setting a Breakpoint with Safari's Debugger
10-15. Debugging in Chrome
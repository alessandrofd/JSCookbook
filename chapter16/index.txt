16.1 - Defining a Basic JavaScript Object
    Problem: You want to create a custom, reusable JavaScript object.
    Solution: Define a new object explicitly using functional syntax, and then create new instances, passing in the data
        the object constructor is expecting

16.2 - Keeping Object Members Private
    Problem: You want to keep one or more object properties private, so they can't be accessed outside of the object
        instance.
    Solution: When creating the private data members, do not use the this keyword with the member.

16.3 - Expanding Objects with Prototype
    Problem: You want to extend an existing object with a new method.
    Solution: Use the Object prototype to extend the object:

            Tune.prototype.addCategory = function(categoryName) {
                this.category = categoryName;
            }

16.4 - Adding Getter/Setter to Objects
    Problem: You want to provide access to protected data.
    Solution: Use the getter/setter functionality introduced with ECMAScript 3.1 with your (or outside objects.

16.5 - Inheriting an Object's Functionality
    Problem: When creating a new object type, you want to inherit the functionality of an existing JavaScript object.
    Solution: Use the concept of constructor chaining and the Function.apply method to emulate traditional class
        inheritance behavior in JavaScript:

            function oldObject(param1) {
                this.param1 = param1;
                this.getParam = function() { return this.param1; };
            }

            function newObject(param1, param2) {
                this.param2 = param2;
                this.getParam2 = function() { return this.param2; };
                oldObject.apply(this, arguments);
                this.getAllParameters = function() { this.getParam() + " " + this.getParam2(); };
            }

            window.onload = function() {
                newObject.prototype = new oldObject();
                var obj = new newObject("value1", "value2");

                // prints out both parameters
                alert(obj.getAllParameters());
            };

16.6 - Extending an Object by Defining a New Property
    Problem: You want to extend an existing object by adding a new property, but without changing the object's
        construction function.
    Solution: Use the new ECMAScript Object.defineProperty method to define one property:

            Object.defineProperty(newBook, "publisher", {
                value: "O'Reilly",
                writable: false,
                enumerable: true,
                configurable: true});

16.7 - Enumerating an Object's Properties
    Problem: You want to see what properties an object has.
    Solution: Use a specialized variation of the for loop to iterate through the properties:

            for (var prop in obj) {
                alert(prop); // prints out the property name
            }

        or use the new ECMAScript 5 Object.keys method to return the names for all properties that can be enumerated:

            alert(Object.keys(obj).join(", "));

        or use another new ECMAScript 5 method, Object.getOwnPropertyNames(obj), to get the names of all properties,
        whether they can be enumerated or not:

            var props = Object.getOwnPropertyNames(obj):

16.8 - Preventing Object Extensibility
    Problem: You want to prevent others from extending an object.
    Solution: Use the new ECMAScript 5 Object.preventExtensions method to lock an object against future additions:

            "use strict";

            var Test = {
                value1 : "one",
                value2 : function() { return this.value1; }
            }

            try {
                Object.preventExtensions(Test);

                // the following fails, and throws an exception in Strict mode
                Test.value3 = "test";
            } catch (e) {
                alert(e);
            }

16.9 - Preventing Object Additions and Changes to Property Descriptors
    Problem: You want to prevent extensions to an object, but you also want to disallow someone from changing the
        property descriptor for an object.
    Solution: Use the new ECMAScript Object.seal method to seal the object against additions and modification of its
        property descriptor.


16.10 - Preventing Any Changes to an Object
    Problem: You've defined your object, and now you want to make sure that its properties aren't redefined or edited by
        other applications using the object.
    Solution: Use the new ECMAScript 5 Object.freeze method to freeze the object against any and all changes.

16.11 - One-Off Objects and Namespacing Your JavaScript
    Problem: You want to encapsulate your library functionality in such a way as to prevent clashes with other libraries.
    Solution: Use an object literal, what I call a one-off object, to implement the JavaScript version of namespacing. An
        example is the following:

            var jscbObject = {
                // return element
                getElem: function(identifier) { return document.getElementById(identifier); },
                stripSlashes: function(str) { return str.replace(/\\/g, ''); },
                removeAngleBrackets : function(str) { return str.replace(/</g, '&lt;').replace(/>/g, '&gt;'); }
            };

            var incoming = jscbObject.getElem("incoming");
            var content = incoming.innerHTML;

            var result = jscbObject.stripSlashes(content);
            result = jscbObject.removeAngleBrackets(result);

            jscbObject.getElem("result").innerHTML = result;

16.12 - Rediscovering "this" with bind
    Problem: You want to control the scope assigned to a given function.
    Solution: Use the new ECMAScript 5 function bind method:

            window.onload = function() {
                window.name = "window";

                var new Obj = {
                    name: "object",
                    sayGreeting: function() {
                        alert("Now this is easy, " + this.name);
                        nestedGreeting = function(greeting) {
                            alert(greeting + "  " + this.name);
                        }.bind(this);
                        nestedGreeting("hello");
                    }
                };
                newObject.sayGreeting("hello");
            }

16.13 - Chaining Your Object's Methods
    Problem: You wish to define your object's methods in such a way that more than one can be used at the same time, like
        the following, which retrieves a reference to a page element and sets the element's style property:

            document.getElementById("elem").setAttribute("class", "buttondiv");

    Solution: The ability to directly call one function on the result of another in the same line of code is known as
        method chaining. It requires specialized code in whatever method you want to chain.
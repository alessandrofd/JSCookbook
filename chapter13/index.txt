13.1 - Determining the Area of the Web Page
    Problem: You want to measure the width and height of the current web page window.
    Solution: You'll need to use a cross-browser technique that ensures consistent results regardless  of the browser
        used. The following is an example of a function that returns an object with the web page viewport's width and
        height:

            function size() {
                var wdth = 0;
                var hth = 0;

                if (!window.innerWidth) {
                    wdth = (document.documentElement.clientWidth ?
                                document.documentElement.clientWidth :
                                document.body.clientWidth);
                    hth = (document.documentElement.clientHeight ?
                                document.documentElement.clientHeight :
                                document.body.clientHeight);
                } else {
                    wdth = window.innerWidth;
                    hth = window.innerHeight;
                }
                return {width:wdth, height:hth};
            }

13.2 - Measuring Elements
    Problem: You want to determine the current height of a web page element.
    Solution: Call getBoundingClientRect for the element. If the returned TextRectangle/ClientRect object has a height
        property, use that. Otherwise, subtract the rectangle's bottom value from its top to derive the height:

            var height = 0;
            var rect = document.getElementById("it").getBoundingClientRect();
            if (rect.height) {
                height = rect.height;
            } else {
                height = rect.bottom - rect.height; // derive height
            }
            alert(rect.height);

13.3 - Locating Elements in the Page
    Problem: You want to know the exact position of an element in the page.
    Solution: Use getBoundingClientRect to get the dimensions and position of the bounding rectangle for the element,
        and then access its top and left values to find position:

            function positionObject(obj) {
                var rect = obj.getBoundingClientRect();
                return [rect.left, rect.top];
            }

    Source Code: example13_1.html

13.4 - Hiding Page Sections
    Problem: You want to hide an existing page element and its children until needed.
    Solution: You can set the CSS visibility property to hide and show the message:

            msg.style.hidden = "visible"; // to display
            msg.style.hidden = "hidden"; // to hide

        or you can use the CSS display property:

            msg.style.display = "block"; // to display
            msg.style.display = "none"; // to remove from display

13.5 - Creating Collapsible Form Sections
    Problem: You have a large form that takes up a lot of space. You only want to display sections of the form as they
        are needed.
    Solution: Split the form into display blocks using div elements, and then change the block's styling to control the
        display of the form section. When the page is loaded, hide all of the form blocks by changing the display value
        to none using JavaScript:

            theFormBlock.setAttribute("style", "display: none");

        To expand the section, change the display setting to block using setAttribute:

            theFormBlock.setAttribute("style", "block");

        or set the value directly:

            theFormBlock.style.display = "block";

    Source Code: example13_2.html

13.6 - Adding a Page Overlay
    Problem: You want to overlay the web page in order to display a message, or provide an expanded photo.
    Solution: Provide a stylesheet setting for a div element that is sized and positioned to cover the
        entire web page:

            .overlay {
                background-color: #000;
                opacity: .7;
                filter: alpha(opacity=70);
                position: absolute; top: 0; left: 0;
                width: 100%; height: 100%;
                z-index: 10;
            }

        Create de div element o demand, adding whatever other content is to be displayed to the div
        element

            function expandPhoto() {
                var overlay = document.createElement("div");
                overlay.setAttribute("id", "overlay");
                overlay.setAttribute("class", "overlay");
                document.body.appendChild(overlay);
            }

        When the overlay is no longer needed, remove it from the page:

            function restore() {
                document.body.removeChild(document.getElementById("overlay"));
            }

    Source Code: example13_3.html

13.7 - Creating Tab Pages
    Problem: You have divided the content that you want to hide or display based on the web page reader's
        actions.
    Solution: Create a tabbed page effect and hide or display tab pages based on clicking the tab label.
    Source Code: example13_4.html

13.8 - Creating Hover-Based Pop-up Info Windows
    Problem: You like the Netflix web site's pop-up window that displays when the mouse cursor is over a movie thumbnail,
        and you want to incorporate this functionality into you own application.
    Solution:
        The Netflix-style pop-up window is based on four different functionalities.

        First, you need to capture the mouseover and mouseout events for each image thumbnail, in order to display or
        remove the pop-up window, respectively. Using a function that manages cross-browser event handling for every
        object that has an info bubble, assign a function to both the onmouseover and onmouseout event handlers.

        Second, you need to access something about the item you're hovering over in order to know what to use to
        populate the pop-up bubble. The information can be in the page, or you can use Ajax to get the information.

        Third, you need to either show the pop-up window, if it already exists and is not displayed, or create the
        window.

        Lastly, when the mouseover event fires, you need to either hide the pop-up window or remove it - whichever makes
        sense in your setup.


    Problem: You have a website that has a main column and one or more side columns. You want to provide a way for your
        web page readers to control the width of the main column, without having to resize the browser.
    Solution: Use a collapsible sidebar.

        Add an X in a span element at the top of the sidebar. Include a custom data-expand attribute set to "true", to
        track whether the column is expanded or not. Also include tabindex="0", so that the element can receive keypress
        events:

            <div>
                <p id="x" data-expand="true" tabindex="0">
                <span style="text-decoration: underline">X</span>
                Collapse sidebar </p>
            </div>

        Add a method handler to the element's click and keypress events events that checks the data-expand attribute to
        see if the column is currently expanded or not. If it is expanded, the column is collapsed, and the main column
        expanded; if not, the sidebar and main column are returned to their regular dimensions.

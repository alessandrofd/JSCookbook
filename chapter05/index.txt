5-1. Looping Through an Array
    Problem: You want to easily access all elements of an array.
    Solution: The most common approach to accessing an array is to use a for loop.

5-2. Creating a Multidimensional Array
    Problem: You want to create a multidimensional array (an array of arrays).
    Solution: Create an array in which each element is also an array.

5-3. Creating a String from an Array
    Problem: You want to create a single string from an array.
    Solution: Use the Array object's built-in join method to join the array elements into a string.

5-4. Sorting an Array
    Problem: You want to sort an array.
    Solution: Use the Array object's sort method.

5-5. Store and Access Values in Order
    Problem: You want to store values in such a way that you can access the values in the order in which they were stored.
    Solution: To store and access values in the order in which they're received, create a FIFO (first-in, first-out)
        queue. Use the JavaScript Array object push method to add items to the queue, and shift to receive.

5-6. Store and Access Values in Reverse Order
    Problem: You want to store values in such a way that you can access the values in reverse order: access the most
        recently stored value first, then a LIFO (last-in, first-out) stack.
    Solution: To access stored values in reverse order (last item added is accessed first), create a LIFO (last-in,
        first-out) stack. Use the JavaScript Array object's push method to add items to the stack, and the pop method to
        retrieve.

5-7. Create a New Array as a Subset of an Existing Array
    Problem: You want to create a new array from a segment of an existing array. If the array elements are objects, you
        want to keep both arrays in sync.
    Solution: Use the Array object slice method to create a new array based on elements within a given range.

5-8. Searching Through an Array
    Problem: You want to search an Array for a specific value and get the array element index if found.
    Solution: Use the new (ECMAScript 5) Array object methods indexOf and lastIndexOf.

5-9. Flatten a Multidimensional Array
    Problem: You want to flatten a multidimensional array into a single dimensional array.
    Solution: Use the Array object concat method to merge the array dimensions into a single dimensional array.

5-10. Search and Remove or Replace Array Elements
    Problem: You want to find occurrences of a given value in an array, and either remove the element or replace it with
        another value.
    Solution: Use the Array object methods indexOf and slice to find and remove/replace array elements.
    Source Code: example5_2.html

5-11. Applying a Function Against Each Array Element
    Problem: You want to use a function to check as Array value, and replace it if it matches a given value.
    Solution: Use the new ECMAScript5 Array object forEach to attach a callback function to each array element.

5-12. Applying a Function to Every Element in an Array and Returning a New Array
    Problem: You want to convert an array of decimal numbers into a new array with their hexadecimal equivalents.
    Solution: Use the Array object map method to create a new array consisting of elements from the old array that
        have been modified via a callback function passed to the map method.

5-13. Creating a Filtered Array
    Problem: You want to filter element values in an array and assign the results to a new array.
    Solution: Use the Array object filter method.

5-14. Validating Array Contents
    Problem: You want to make sure that an array meets certain criteria.
    Solution: Use the Array object's every method to check that every element passes a certain criteria. Or use the
        Array object's some method to ensure that at least some of the elements pass the criteria.

5-15. Using an Associative Array to Store Form Element Names and Values
    Problem: You want to store form element names and values, for later validation purposes.
    Solution: Use an associative array  to store the elements, using the element identifiers as array indexes.
    Source Code: example5_3.html